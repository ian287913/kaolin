import json
import os
import glob
import time

import torch
import numpy as np
from matplotlib import pyplot as plt
import matplotlib.pylab as pylab
from matplotlib.widgets import Slider, Button, TextBox
from pathlib import Path

import kaolin as kal

import ian_cubic_spline_optimizer
import ian_renderer
import ian_utils

# Hyperparameters
image_weight = 100
alpha_weight = 100
y_weight = 100
y_lr = 5
t_lr = 5
scheduler_step_size = 20
scheduler_gamma = 0.5
origin_pos_lr = 5e-1
length_x_lr = 5e-1
render_res = 512

################################## Class Definition ##################################

class CurveMeshOptimizer:
    def __init__(self, 
                 key_size = 3, y_weight = 10, y_lr = 5e-1, t_lr = 5e-1, scheduler_step_size = 20, scheduler_gamma = 0.5,
                 origin_pos_lr = 5e-1, length_x_lr = 5e-1,
                 render_res = 512):
        
        # init curve
        self.spline_optimizer = ian_cubic_spline_optimizer.CubicSplineOptimizer(
            key_size, 
            y_weight=y_weight, 
            y_lr=y_lr, 
            t_lr=t_lr, 
            scheduler_step_size=scheduler_step_size, 
            scheduler_gamma=scheduler_gamma)
        
        # init mesh & renderer
        self.body_mesh = ian_renderer.Mesh(None)
        self.renderer = ian_renderer.Renderer('cuda', 1, (render_res, render_res))

        # initialize leaves
        self.origin_pos = torch.tensor((-1, -1, 0), dtype=torch.float, device='cuda', requires_grad=True)
        self.length_x = torch.tensor(2, dtype=torch.float, device='cuda', requires_grad=True)

        # initialize optimizers and schedulers
        self.origin_pos_optim  = torch.optim.Adam(params=[self.origin_pos], lr = origin_pos_lr)
        self.length_x_optim  = torch.optim.Adam(params=[self.length_x], lr = length_x_lr)
        self.origin_pos_scheduler = torch.optim.lr_scheduler.StepLR(
            self.origin_pos_optim,
            step_size=scheduler_step_size,
            gamma=scheduler_gamma)
        self.length_x_scheduler = torch.optim.lr_scheduler.StepLR(
            self.length_x_optim,
            step_size=scheduler_step_size,
            gamma=scheduler_gamma)
    '''
    optimization related funcitons
    should call by this order: 
    1. zero_grad()
    2. calculate_ys()
    3. loss.backward() outside the class w.r.t. the pixel tensors returned by render()
    4. step()
    '''
    def zero_grad(self):
        self.spline_optimizer.zero_grad()

        self.length_x_optim.zero_grad()
        self.origin_pos_optim.zero_grad()
        
    def render(self, lod_x, lod_y, data):
        
        self.body_mesh.set_mesh_by_samples(ian_renderer.calculate_roots(self.origin_pos, self.length_x, lod_x), self.spline_optimizer.calculate_ys_with_lod_x(lod_x), lod_y, 512)

        #render...
        rendered_image, mask, soft_mask = self.renderer.render_image_and_mask_with_camera_params(
            elev = data['metadata']['cam_elev'], 
            azim = data['metadata']['cam_azim'], 
            r = data['metadata']['cam_radius'], 
            look_at_height = data['metadata']['cam_look_at_height'], 
            fovyangle = data['metadata']['cam_fovyangle'],
            mesh = self.body_mesh,
            sigmainv = 7000)
        
        return (rendered_image, mask, soft_mask)
    
    def step(self):
        print(f"self.spline_optimizer.key_ys.grad = {self.spline_optimizer.key_ys.grad}")
        self.spline_optimizer.step()

        self.length_x_optim.step()
        self.origin_pos_optim.step()
        self.length_x_scheduler.step()
        self.origin_pos_scheduler.step()

################################## Utils ##################################

def train_mesh():
    # parameters
    rendered_path_single = "./resources/rendered_curved_mesh/"
    num_epoch = 100
    visualize_epoch_interval = 20
    sample_size = 100
    key_size = 5
    lod_x = 20
    lod_y = 20

    # get ground truth
    # get data
    train_data, dataloader = ian_utils.create_dataloader_with_single_view(rendered_path_single, 1)
    data = train_data[0]
    gt_rgb = data['rgb'].cuda()
    gt_alpha = data['alpha'].cuda()

    # init optimizer
    curve_mesh_optimizer = CurveMeshOptimizer(
        key_size, 
        y_weight=y_weight, 
        y_lr=y_lr, 
        t_lr=t_lr, 
        scheduler_step_size=scheduler_step_size, 
        scheduler_gamma=scheduler_gamma,
        origin_pos_lr=origin_pos_lr,
        length_x_lr=length_x_lr,
        render_res=gt_rgb.shape[0])
    
    
    for epoch in range(num_epoch):
        if (epoch % visualize_epoch_interval == 0):
            visualize_results(curve_mesh_optimizer, lod_x, lod_y, data, epoch)

        curve_mesh_optimizer.zero_grad()
        rendered_image, mask, soft_mask = curve_mesh_optimizer.render(lod_x=lod_x, lod_y=lod_y, data=data)
        ### Compute Losses ###
        image_loss = torch.mean(torch.abs(rendered_image - gt_rgb))
        loss = (image_loss * image_weight)

        if (epoch % visualize_epoch_interval == 0):
            from torchviz import make_dot, make_dot_from_trace
            g = make_dot(loss)
            g.view()

        ### Update the parameters ###
        loss.backward()
        curve_mesh_optimizer.step()

        print(f"Epoch {epoch} - loss: {float(loss)}")

    visualize_results(curve_mesh_optimizer, lod_x, lod_y, data, epoch)


def visualize_results(curve_mesh_optimizer:CurveMeshOptimizer, lod_x, lod_y, data, epoch = 0):
    with torch.no_grad():
        rendered_image, mask, soft_mask = curve_mesh_optimizer.render(lod_x=lod_x, lod_y=lod_y, data=data)

    # # print(f"visualize_results: rendered_image.shape = {rendered_image.shape}")
    pylab.imshow(rendered_image[0].cpu().detach())
    pylab.title(f'epoch: {epoch}')
    pylab.waitforbuttonpress(0)
    pylab.cla()
    
    ##pylab.close()

    ##pylab.savefig(f"./optimization record/{epoch}.png")
    ##pylab.close()

if __name__ == "__main__":
    train_mesh()
